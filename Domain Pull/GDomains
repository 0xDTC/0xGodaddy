#!/bin/bash

# Load secrets
source ../secret.txt

# Variables
PAGE_SIZE=1000
marker=""
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
output_file="$script_dir/domains.json"
markdown_file="$script_dir/GDdomain.md"
html_file="$script_dir/GDdomain.html"
history_file="$script_dir/domains_history.json"
today_date=$(date +"%Y-%m-%d")

# Initialize the output file with an empty array
echo "[]" > "$output_file"
> "$markdown_file"

# Ensure history file exists and is valid JSON
if [[ ! -f "$history_file" ]] || [[ ! -s "$history_file" ]]; then
    echo "[]" > "$history_file"
fi

# Validate the history file
if ! jq empty "$history_file" 2>/dev/null; then
    echo "History file was invalid JSON, resetting it..."
    echo "[]" > "$history_file"
fi

while true; do
    # Fetch the domains data
    response=$(curl -s -X GET -H "Authorization: sso-key $GODADDY_API_KEY:$GODADDY_API_SECRET" -H "Accept: application/json" "https://api.godaddy.com/v1/domains?limit=$PAGE_SIZE&marker=$marker")

    # Check if the response is empty
    if [[ -z "$response" ]]; then
        echo "Failed to fetch domains."
        exit 1
    fi

    # Create a temporary file
    tmp_file=$(mktemp)

    # Merge with the output file
    jq -s '.[0] + .[1]' "$output_file" <(echo "$response") > "$tmp_file" && mv "$tmp_file" "$output_file"

    # Check if the number of domains fetched is less than PAGE_SIZE
    count=$(jq 'length' <<< "$response")
    if (( count < PAGE_SIZE )); then
        break
    fi

    # Update the marker for the next page
    marker=$(jq -r '.[-1].domain' <<< "$response")
done

# Process domains to add discovery dates
tmp_processed=$(mktemp)

# Create a simple list of domains from the existing history file
history_domains=$(jq -r 'map({(.domain): .discovery_date}) | add' "$history_file" 2>/dev/null)
if [[ $? -ne 0 ]]; then
    # If there's an error with the jq command, reset the history
    echo "Error processing history, resetting..."
    echo "[]" > "$history_file"
    history_domains="{}"
fi

# For each domain in the current fetch, add discovery date
jq --arg today "$today_date" --argjson history "$history_domains" '
    map(. + {
        discovery_date: ($history[.domain] // $today)
    })
' "$output_file" > "$tmp_processed"

# Update the output file with the processed data
mv "$tmp_processed" "$output_file"

# Update history file with current domains and their discovery dates
jq -n --arg today "$today_date" --slurpfile current "$output_file" --slurpfile history "$history_file" '
    # Combine existing history and new domains
    ($history[0] // []) as $old_history |
    ($current[0] // []) as $domains |
    
    # Create a map of existing domain:date from history
    ($old_history | map({key: .domain, value: .discovery_date}) | from_entries) as $history_map |
    
    # For each domain in current, use history date if exists, otherwise today
    $domains | map({
        domain: .domain,
        discovery_date: ($history_map[.domain] // $today)
    })
' > "$tmp_processed"

# Update the history file
mv "$tmp_processed" "$history_file"

# Print and write counts of statuses
echo "Counts of Domains by Status:" | tee -a "$markdown_file"
echo "-----------------------------" | tee -a "$markdown_file"

jq -r '.[].status' "$output_file" | sort | uniq -c | while read -r count status; do
    printf "%-25s: %d\n" "$status" "$count" | tee -a "$markdown_file"
done

# Print and write table of domains with statuses and discovery dates
echo -e "\nDomains and Their Statuses:" | tee -a "$markdown_file"
echo "-----------------------------------------------------------------------" | tee -a "$markdown_file"
printf "%-40s | %-20s | %-15s\n" "Domain" "Status" "Discovery Date" | tee -a "$markdown_file"
printf "%-40s | %-20s | %-15s\n" "---------------------------------------" "--------------------" "---------------" | tee -a "$markdown_file"

jq -r '.[] | [.domain, .status, .discovery_date] | @tsv' "$output_file" | while IFS=$'\t' read -r domain status discovery_date; do
    printf "%-40s | %-20s | %-15s\n" "$domain" "$status" "$discovery_date" | tee -a "$markdown_file"
done

# Generate HTML output
{
    echo "<!DOCTYPE html>"
    echo "<html>"
    echo "<head>"
    echo "    <title>GoDaddy Domain List</title>"
    echo "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
    echo "    <style>"
    echo "        body { font-family: Arial, sans-serif; margin: 20px; max-width: 1200px; margin: 0 auto; padding: 20px; }"
    echo "        h1 { color: #333; }"
    echo "        .summary { background-color: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 30px; }"
    echo "        .table-container { overflow-x: auto; max-height: 80vh; }"
    echo "        table { width: 100%; border-collapse: collapse; margin-top: 20px; table-layout: fixed; }"
    echo "        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; vertical-align: top; font-size: 13px; }"
    echo "        th { background-color: #4CAF50; color: white; cursor: pointer; position: sticky; top: 0; z-index: 10; }"
    echo "        th:hover { background-color: #3e8e41; }"
    echo "        tr:nth-child(even) { background-color: #f2f2f2; }"
    echo "        tr:hover { background-color: #ddd; }"
    echo "        .timestamp { color: #666; font-size: 0.9em; margin-bottom: 20px; }"
    echo "        .filter-row input { width: 100%; padding: 8px; box-sizing: border-box; }"
    echo "        .filter-controls { margin-bottom: 20px; }"
    echo "        .filter-controls button { padding: 8px 16px; margin-right: 10px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }"
    echo "        .filter-controls button:hover { background-color: #3e8e41; }"
    echo "        /* Column widths */"
    echo "        th:nth-child(1), td:nth-child(1) { width: 45%; } /* Domain */"
    echo "        th:nth-child(2), td:nth-child(2) { width: 30%; } /* Status */"
    echo "        th:nth-child(3), td:nth-child(3) { width: 25%; } /* Discovery Date */"
    echo "    </style>"
    echo "</head>"
    echo "<body>"
    echo "    <h1>GoDaddy Domain List</h1>"
    echo "    <div class='timestamp'>Generated: $(date +"%Y-%m-%d %H:%M:%S")</div>"
    
    echo "    <div class='summary'>"
    echo "        <h2>Counts of Domains by Status:</h2>"
    count_data=$(jq -r '.[] | .status' "$output_file" | sort | uniq -c | awk '{printf "        <p>%s: %d</p>\n", $2, $1}')
    echo "$count_data"
    echo "    </div>"
    
    echo "    <div class='filter-controls'>"
    echo "        <button onclick='resetFilters()'>Reset Filters</button>"
    echo "        <button onclick='exportToCSV()'>Export to CSV</button>"
    echo "    </div>"
    
    echo "    <h2>Domain Details</h2>"
    echo "    <div class='table-container'>"
    echo "        <table id='domainsTable'>"
    echo "            <thead>"
    echo "                <tr>"
    echo "                    <th onclick='sortTable(0)'>Domain</th>"
    echo "                    <th onclick='sortTable(1)'>Status</th>"
    echo "                    <th onclick='sortTable(2)'>Discovery Date</th>"
    echo "                </tr>"
    echo "                <tr class='filter-row'>"
    echo "                    <td><input type='text' onkeyup='filterTable()' placeholder='Filter domain...'></td>"
    echo "                    <td><input type='text' onkeyup='filterTable()' placeholder='Filter status...'></td>"
    echo "                    <td><input type='text' onkeyup='filterTable()' placeholder='Filter date...'></td>"
    echo "                </tr>"
    echo "            </thead>"
    echo "            <tbody>"
    
    jq -r '.[] | [.domain, .status, .discovery_date] | @tsv' "$output_file" | while IFS=$'\t' read -r domain status discovery_date; do
        echo "            <tr>"
        echo "                <td>$domain</td>"
        echo "                <td>$status</td>"
        echo "                <td>$discovery_date</td>"
        echo "            </tr>"
    done
    
    echo "            </tbody>"
    echo "        </table>"
    echo "    </div>"
    
    echo "    <script>"
    echo "        // Filter table function"
    echo "        function filterTable() {"
    echo "            const table = document.getElementById('domainsTable');"
    echo "            const rows = table.getElementsByTagName('tr');"
    echo "            const filters = document.querySelectorAll('.filter-row input');"
    echo ""
    echo "            // Start from 2 to skip header and filter rows"
    echo "            for (let i = 2; i < rows.length; i++) {"
    echo "                let show = true;"
    echo "                const cells = rows[i].getElementsByTagName('td');"
    echo ""
    echo "                for (let j = 0; j < filters.length; j++) {"
    echo "                    const filter = filters[j].value.toUpperCase();"
    echo "                    if (filter && cells[j].textContent.toUpperCase().indexOf(filter) === -1) {"
    echo "                        show = false;"
    echo "                        break;"
    echo "                    }"
    echo "                }"
    echo ""
    echo "                rows[i].style.display = show ? '' : 'none';"
    echo "            }"
    echo "        }"
    echo ""
    echo "        function resetFilters() {"
    echo "            const filters = document.querySelectorAll('.filter-row input');"
    echo "            filters.forEach(filter => filter.value = '');"
    echo "            filterTable();"
    echo "        }"
    echo ""
    echo "        function sortTable(n) {"
    echo "            const table = document.getElementById('domainsTable');"
    echo "            let switching = true;"
    echo "            let dir = 'asc';"
    echo "            let switchcount = 0;"
    echo ""
    echo "            while (switching) {"
    echo "                switching = false;"
    echo "                const rows = table.rows;"
    echo ""
    echo "                for (let i = 2; i < (rows.length - 1); i++) {"
    echo "                    let shouldSwitch = false;"
    echo "                    const x = rows[i].getElementsByTagName('td')[n];"
    echo "                    const y = rows[i + 1].getElementsByTagName('td')[n];"
    echo ""
    echo "                    if (dir === 'asc') {"
    echo "                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {"
    echo "                            shouldSwitch = true;"
    echo "                            break;"
    echo "                        }"
    echo "                    } else if (dir === 'desc') {"
    echo "                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {"
    echo "                            shouldSwitch = true;"
    echo "                            break;"
    echo "                        }"
    echo "                    }"
    echo ""
    echo "                    if (shouldSwitch) {"
    echo "                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);"
    echo "                        switching = true;"
    echo "                        switchcount++;"
    echo "                    }"
    echo "                }"
    echo ""
    echo "                if (switchcount === 0 && dir === 'asc') {"
    echo "                    dir = 'desc';"
    echo "                    switching = true;"
    echo "                }"
    echo "            }"
    echo "        }"
    echo ""
    echo "        function exportToCSV() {"
    echo "            const table = document.getElementById('domainsTable');"
    echo "            let csv = [];"
    echo "            const rows = table.querySelectorAll('tr');"
    echo ""
    echo "            for (let i = 0; i < rows.length; i++) {"
    echo "                if (i === 1) continue; // Skip the filter row"
    echo "                if (rows[i].style.display === 'none') continue; // Skip filtered out rows"
    echo ""
    echo "                const row = [];"
    echo "                const cols = rows[i].querySelectorAll('td, th');"
    echo ""
    echo "                for (let j = 0; j < cols.length; j++) {"
    echo "                    // Get the text content, handling header cells"
    echo "                    let text = cols[j].textContent || cols[j].innerText;"
    echo "                    // Replace commas and quotes"
    echo "                    text = text.replace(/\"/g, '\"\"');"
    echo "                    row.push('\"' + text + '\"');"
    echo "                }"
    echo "                csv.push(row.join(','));"
    echo "            }"
    echo ""
    echo "            const csvStr = csv.join('\\n');"
    echo "            const blob = new Blob([csvStr], { type: 'text/csv;charset=utf-8;' });"
    echo "            const link = document.createElement('a');"
    echo "            const url = URL.createObjectURL(blob);"
    echo ""
    echo "            link.setAttribute('href', url);"
    echo "            link.setAttribute('download', 'godaddy_domains_' + new Date().toISOString().slice(0, 10) + '.csv');"
    echo "            link.style.visibility = 'hidden';"
    echo "            document.body.appendChild(link);"
    echo "            link.click();"
    echo "            document.body.removeChild(link);"
    echo "        }"
    echo ""
    echo "        // Sort by domain name initially"
    echo "        window.onload = function() {"
    echo "            sortTable(0);"
    echo "        };"
    echo "    </script>"
    echo "</body>"
    echo "</html>"
} > "$html_file"

# Delete the .json file
rm -f "$output_file"

echo "Output saved to:"
echo "- $markdown_file (Markdown format)"
echo "- $html_file (HTML format)"